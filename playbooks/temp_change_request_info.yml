---
- name: Buckets offline + SLA (near breach / violadas) a partir de records do vars.yml
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # Limiares ajustáveis
    window_minutes_new: 15    # "novos" = abertos nos últimos X minutos
    ownerless_hours: 24       # "velhos sem owner" = abertos há >= X horas sem owner
    stale_hours: 24           # "sem atualização" = sem update há >= X horas
    near_breach_minutes: 60   # "SLA próximo" = prazo em <= X minutos
    target_ticket_number: "CHG0032689"
  # Entrada offline (sem chamadas ao ServiceNow aqui)
  vars_files:
    - "vars_change.yml"    # deve conter: records: [...]

  pre_tasks:
    - name: Validar 'records' do vars.yml
      assert:
        that:
          - records is defined
          - records | type_debug == 'list'
        fail_msg: "Esperava 'records' como lista em vars.yml."

  tasks:
    - name: Epoch atual (UTC)
      set_fact:
        now_epoch: "{{ lookup('pipe','date -u +%s') | int }}"

    - name: Normalizar lista de changes
      set_fact:
        chg_all: "{{ records | default([]) }}"

    - name: Inicializar buckets
      set_fact:
        # buckets sem depender de SLA
        novos_sem_owner: []
        velhos_sem_owner: []
        sem_atualizacao_sem_owner: []
        sem_atualizacao_com_owner: []
        # buckets de SLA (ficam vazios se não houver sla_due/due_date)
        near_breach: []
        violadas_stale: []

    # --------- 1) Novos e sem owner (≤ window_minutes_new) ---------
    - name: Classificar "Novos e sem owner"
      set_fact:
        novos_sem_owner: "{{ novos_sem_owner + [ novo_reg ] }}"
      vars:
        opened_epoch: >-
          {{
            (lookup('pipe', 'date -u -d ' ~ ( (item.opened_at | default('') ) | quote ) ~ ' +%s') | int)
              if (item.opened_at is defined and (item.opened_at | string | length) > 0) else 0
          }}
        delta_open_sec: "{{ (now_epoch | int) - (opened_epoch | int) }}"
        sem_owner: >-
          {{ (item.assigned_to is not defined) or ((item.assigned_to | string | trim) == '') }}
        novo_reg: >-
          {{
            {
              'number': item.number,
              'sys_id': item.sys_id,
              'short_description': item.short_description | default(''),
              'opened_at': item.opened_at | default(''),
              'minutes_open': ((delta_open_sec | int) // 60) | int
            }
          }}
      loop: "{{ chg_all }}"
      loop_control:
        label: "{{ item.number | default('sem-number') }}"
      when:
        - opened_epoch | int > 0
        - sem_owner
        - (delta_open_sec | int) <= (window_minutes_new | int) * 60

    # --------- 1b) Velhos sem owner (≥ ownerless_hours) -----------
    - name: Classificar "Velhos sem owner" (abertos há >= ownerless_hours)
      set_fact:
        velhos_sem_owner: "{{ velhos_sem_owner + [ velho_reg ] }}"
      vars:
        opened_epoch: >-
          {{
            (lookup('pipe', 'date -u -d ' ~ ( (item.opened_at | default('') ) | quote ) ~ ' +%s') | int)
              if (item.opened_at is defined and (item.opened_at | string | length) > 0) else 0
          }}
        delta_open_sec: "{{ (now_epoch | int) - (opened_epoch | int) }}"
        sem_owner: >-
          {{ (item.assigned_to is not defined) or ((item.assigned_to | string | trim) == '') }}
        velho_reg: >-
          {{
            {
              'number': item.number,
              'sys_id': item.sys_id,
              'short_description': item.short_description | default(''),
              'opened_at': item.opened_at | default(''),
              'hours_open': ((delta_open_sec | int) // 3600) | int
            }
          }}
      loop: "{{ chg_all }}"
      loop_control:
        label: "{{ item.number | default('sem-number') }}"
      when:
        - opened_epoch | int > 0
        - sem_owner
        - (delta_open_sec | int) >= (ownerless_hours | int) * 3600

    # --------- 2) Sem atualização ≥ stale_hours (sem owner) --------
    - name: Classificar "Sem atualização (sem owner) >= stale_hours"
      set_fact:
        sem_atualizacao_sem_owner: "{{ sem_atualizacao_sem_owner + [ stale_reg ] }}"
      vars:
        updated_epoch: >-
          {{
            (lookup('pipe','date -u -d ' ~ ( (item.sys_updated_on | default('') ) | quote ) ~ ' +%s') | int)
              if (item.sys_updated_on is defined and (item.sys_updated_on | string | length) > 0) else 0
          }}
        delta_update_sec: "{{ (now_epoch | int) - (updated_epoch | int) }}"
        sem_owner: >-
          {{ (item.assigned_to is not defined) or ((item.assigned_to | string | trim) == '') }}
        stale_reg: >-
          {{
            {
              'number': item.number,
              'sys_id': item.sys_id,
              'short_description': item.short_description | default(''),
              'last_update': item.sys_updated_on | default(''),
              'hours_since_update': ((delta_update_sec | int) // 3600) | int
            }
          }}
      loop: "{{ chg_all }}"
      loop_control:
        label: "{{ item.number | default('sem-number') }}"
      when:
        - updated_epoch | int > 0
        - sem_owner
        - (delta_update_sec | int) >= (stale_hours | int) * 3600

    # --------- 3) Sem atualização ≥ stale_hours (com owner) --------
    - name: Classificar "Sem atualização (com owner) >= stale_hours"
      set_fact:
        sem_atualizacao_com_owner: "{{ sem_atualizacao_com_owner + [ stale_reg ] }}"
      vars:
        updated_epoch: >-
          {{
            (lookup('pipe','date -u -d ' ~ ( (item.sys_updated_on | default('') ) | quote ) ~ ' +%s') | int)
              if (item.sys_updated_on is defined and (item.sys_updated_on | string | length) > 0) else 0
          }}
        delta_update_sec: "{{ (now_epoch | int) - (updated_epoch | int) }}"
        tem_owner: >-
          {{ (item.assigned_to is defined) and ((item.assigned_to | string | trim) != '') }}
        stale_reg: >-
          {{
            {
              'number': item.number,
              'sys_id': item.sys_id,
              'assigned_to': item.assigned_to | default(''),
              'short_description': item.short_description | default(''),
              'last_update': item.sys_updated_on | default(''),
              'hours_since_update': ((delta_update_sec | int) // 3600) | int
            }
          }}
      loop: "{{ chg_all }}"
      loop_control:
        label: "{{ item.number | default('sem-number') }}"
      when:
        - updated_epoch | int > 0
        - tem_owner
        - (delta_update_sec | int) >= (stale_hours | int) * 3600

    # ======================= SLA (OFFLINE) =========================
    # 4) SLA próximo de violar — usando SLA local da change (sla_due ou due_date)
    - name: (OFFLINE) Classificar "SLA próximo de violar" usando sla_due/due_date
      set_fact:
        near_breach: "{{ near_breach + [ nb_reg ] }}"
      vars:
        # preferir sla_due; se vazio, tentar due_date
        deadline_str: >-
          {{
            (item.sla_due | default('')) if (item.sla_due is defined and (item.sla_due | string | length) > 0)
            else (item.due_date | default(''))
          }}
        due_epoch: >-
          {{
            (lookup('pipe', 'date -u -d ' ~ (deadline_str | quote) ~ ' +%s') | int)
              if (deadline_str | string | length) > 0 else 0
          }}
        time_left_sec: "{{ (due_epoch | int) - (now_epoch | int) }}"
        nb_reg: >-
          {{
            {
              'number': item.number,
              'minutes_left': ((time_left_sec | int) // 60) | int,
              'deadline': deadline_str
            }
          }}
      loop: "{{ chg_all }}"
      loop_control:
        label: "{{ item.number | default('sem-number') }}"
      when:
        - due_epoch | int > 0
        - time_left_sec | int >= 0
        - time_left_sec | int <= (near_breach_minutes | int) * 60

    # 5) Violadas + sem atualização ≥ stale_hours — inferidas por prazo ultrapassado
    - name: (OFFLINE) Classificar "Violadas e sem atualização há >= stale_hours" por deadline ultrapassado
      set_fact:
        violadas_stale: "{{ violadas_stale + [ vs_reg ] }}"
      vars:
        # preferir sla_due; se vazio, tentar due_date
        deadline_str: >-
          {{
            (item.sla_due | default('')) if (item.sla_due is defined and (item.sla_due | string | length) > 0)
            else (item.due_date | default(''))
          }}
        due_epoch: >-
          {{
            (lookup('pipe', 'date -u -d ' ~ (deadline_str | quote) ~ ' +%s') | int)
              if (deadline_str | string | length) > 0 else 0
          }}
        updated_epoch: >-
          {{
            (lookup('pipe','date -u -d ' ~ ( (item.sys_updated_on | default('') ) | quote ) ~ ' +%s') | int)
              if (item.sys_updated_on is defined and (item.sys_updated_on | string | length) > 0) else 0
          }}
        time_left_sec: "{{ (due_epoch | int) - (now_epoch | int) }}"
        hours_since_update: "{{ ((now_epoch | int) - (updated_epoch | int)) // 3600 }}"
        vs_reg: >-
          {{
            {
              'number': item.number,
              'deadline': deadline_str,
              'last_update': item.sys_updated_on | default(''),
              'hours_since_update': (hours_since_update | int)
            }
          }}
      loop: "{{ chg_all }}"
      loop_control:
        label: "{{ item.number | default('sem-number') }}"
      when:
        - due_epoch | int > 0
        - time_left_sec | int < 0
        - updated_epoch | int > 0
        - hours_since_update | int >= (stale_hours | int)

    # ------------------ Saídas / Resumo ------------------
    - name: Contagens por bucket (inclui SLA)
      debug:
        msg:
          - "Novos e sem owner (≤ {{ window_minutes_new }} min): {{ novos_sem_owner | length }}"
          - "Velhos sem owner (≥ {{ ownerless_hours }} h): {{ velhos_sem_owner | length }}"
          - "Sem atualização (SEM owner) ≥ {{ stale_hours }} h: {{ sem_atualizacao_sem_owner | length }}"
          - "Sem atualização (COM owner) ≥ {{ stale_hours }} h: {{ sem_atualizacao_com_owner | length }}"
          - "SLA próximo (≤ {{ near_breach_minutes }} min): {{ near_breach | length }}"
          - "Violadas + sem update ≥ {{ stale_hours }} h: {{ violadas_stale | length }}"

    - name: Listas de números por bucket (inclui SLA)
      debug:
        msg:
          novos_sem_owner:            "{{ novos_sem_owner             | map(attribute='number') | list }}"
          velhos_sem_owner:           "{{ velhos_sem_owner            | map(attribute='number') | list }}"
          sem_atualizacao_sem_owner:  "{{ sem_atualizacao_sem_owner   | map(attribute='number') | list }}"
          sem_atualizacao_com_owner:  "{{ sem_atualizacao_com_owner   | map(attribute='number') | list }}"
          near_breach:                "{{ near_breach                 | map(attribute='number') | list }}"
          violadas_stale:             "{{ violadas_stale              | map(attribute='number') | list }}"

    # --- Sessão de contagem (length) ---
    - name: Construir texto de contagem (resumo)
      set_fact:
        counts_text: |-
          *Contagem (resumo)*
          - Tickets novos e sem owner (≤ {{ window_minutes_new }} min): {{ novos_sem_owner | length }}
          - Tickets abertos e sem owner (≥ {{ ownerless_hours }} h): {{ velhos_sem_owner | length }}
          - Ticket sem atualização (SEM owner) ≥ {{ stale_hours }} h: {{ sem_atualizacao_sem_owner | length }}
          - Sem atualização (COM owner) ≥ {{ stale_hours }} h: {{ sem_atualizacao_com_owner | length }}
          - SLA próximo (≤ {{ near_breach_minutes }} min): {{ near_breach | length }}
          - Violadas + sem update ≥ {{ stale_hours }} h: {{ violadas_stale | length }}

    - name: Exibir contagem (apenas debug)
      debug:
        var: counts_text

    # --- Opcional: incorporar a contagem no texto que já será enviado ao Chat ---
    - name: Montar mensagem final com contagem + listas
      set_fact:
        chat_text: |-
          {{ counts_text }}

          *Novos e sem owner (≤ {{ window_minutes_new }} min):* {{ novos_sem_owner | map(attribute='number') | list }}
          *Velhos sem owner (≥ {{ ownerless_hours }} h):* {{ velhos_sem_owner | map(attribute='number') | list }}
          *Sem atualização (SEM owner) ≥ {{ stale_hours }} h:* {{ sem_atualizacao_sem_owner | map(attribute='number') | list }}
          *Sem atualização (COM owner) ≥ {{ stale_hours }} h:* {{ sem_atualizacao_com_owner | map(attribute='number') | list }}
          *SLA próximo (≤ {{ near_breach_minutes }} min):* {{ near_breach | map(attribute='number') | list }}
          *Violadas + sem update ≥ {{ stale_hours }} h:* {{ violadas_stale | map(attribute='number') | list }}

    - name: Pré-visualizar mensagem
      debug:
        var: chat_text

    - name: Enviar mensagem de texto para o Google Chat
      uri:
        url: "{{ google_chat_webhook_url }}"
        method: POST
        headers:
          Content-Type: "application/json; charset=UTF-8"
        body_format: json
        body:
          text: "{{ chat_text }}"
        status_code: 200
        return_content: true
      register: chat_resp
      when: chat_text is defined

    - name: Exibir resposta do Google Chat
      debug:
        var: chat_resp.json

    - name: Exibir resposta do Google Chat
      debug:
        msg:
          - "HTTP status: {{ chat_resp.status }}"
          - "Resposta (pode vir vazia): {{ chat_resp.content | default('') }}"


    - name: Localizar ticket alvo pelo number
      set_fact:
        ticket_obj: "{{ (chg_all | selectattr('number','equalto', target_ticket_number) | list | first) | default({}) }}"

    - name: Falhar se não encontrou o ticket
      assert:
        that:
          - ticket_obj | length > 0
        fail_msg: "Ticket {{ target_ticket_number }} não encontrado em records."

    # Epochs para cálculos de tempo
    - name: Agora (UTC epoch)
      set_fact:
        now_epoch: "{{ lookup('pipe','date -u +%s') | int }}"

    - name: Calcular horas aberto e horas desde o último update
      set_fact:
        opened_epoch: >-
          {{
            (lookup('pipe', 'date -u -d ' ~ ( (ticket_obj.opened_at | default('') ) | quote ) ~ ' +%s') | int)
              if (ticket_obj.opened_at is defined and (ticket_obj.opened_at | string | length) > 0) else 0
          }}
        updated_epoch: >-
          {{
            (lookup('pipe','date -u -d ' ~ ( (ticket_obj.sys_updated_on | default('') ) | quote ) ~ ' +%s') | int)
              if (ticket_obj.sys_updated_on is defined and (ticket_obj.sys_updated_on | string | length) > 0) else 0
          }}
    - set_fact:
        hours_open: "{{ ((now_epoch | int) - (opened_epoch | int)) // 3600 if opened_epoch|int>0 else 0 }}"
        hours_since_update: "{{ ((now_epoch | int) - (updated_epoch | int)) // 3600 if updated_epoch|int>0 else 0 }}"

    # Normalização de campos úteis
    - name: Montar dicionário final de detalhes do ticket
      set_fact:
        ticket_details:
          number: "{{ ticket_obj.number }}"
          sys_id: "{{ ticket_obj.sys_id | default('') }}"
          short_description: "{{ ticket_obj.short_description | default('') }}"
          description: "{{ ticket_obj.description | default('') }}"
          assigned_to: >-
            {{
              (ticket_obj.assigned_to | default('') | string | trim)
              if (ticket_obj.assigned_to is defined and (ticket_obj.assigned_to | string | trim) != '')
              else 'None'
            }}
          priority: "{{ ticket_obj.priority | default('') }}"
          state: "{{ ticket_obj.state | default('') }}"
          category: "{{ ticket_obj.category | default('') }}"
          opened_at: "{{ ticket_obj.opened_at | default('') }}"
          sys_updated_on: "{{ ticket_obj.sys_updated_on | default('') }}"
          hours_open: "{{ hours_open | int }}"
          hours_since_update: "{{ hours_since_update | int }}"
          on_hold: "{{ ticket_obj.on_hold | default('') }}"
          approval: "{{ ticket_obj.approval | default('') }}"
          assignment_group: "{{ ticket_obj.assignment_group | default('') }}"
          made_sla: "{{ ticket_obj.made_sla | default('') }}"
          sla_due: "{{ ticket_obj.sla_due | default('') }}"

    - name: Exibir detalhes completos no console
      debug:
        var: ticket_details

    # Mensagem formatada (texto simples) – opcional Google Chat
    - name: Construir mensagem formatada
      set_fact:
        mensagem_ticket: |-
          *Ticket:* {{ ticket_details.number }}
          *Título:* {{ ticket_details.short_description }}
          *Descrição:* {{ ticket_details.description }}
          *Responsável:* {{ ticket_details.assigned_to }}
          *Prioridade:* {{ ticket_details.priority }}
          *Estado:* {{ ticket_details.state }}
          *Categoria:* {{ ticket_details.category }}
          *Aberto em:* {{ ticket_details.opened_at }} ({{ ticket_details.hours_open }}h)
          *Última atualização:* {{ ticket_details.sys_updated_on }} ({{ ticket_details.hours_since_update }}h)
          *Assignment group:* {{ ticket_details.assignment_group }}
          *On hold:* {{ ticket_details.on_hold }}
          *Aprovação:* {{ ticket_details.approval }}
          *Made SLA:* {{ ticket_details.made_sla }}
          *SLA due:* {{ ticket_details.sla_due }}
          *Sys ID:* {{ ticket_details.sys_id }}

    - name: Pré-visualizar mensagem formatada
      debug:
        var: mensagem_ticket

    # Enviar para Google Chat se webhook estiver definido
    - name: Enviar para Google Chat (opcional)
      uri:
        url: "{{ google_chat_webhook_url }}"
        method: POST
        headers:
          Content-Type: "application/json; charset=UTF-8"
        body_format: json
        body:
          text: "{{ mensagem_ticket }}"
        status_code: 200
      when:
        - google_chat_webhook_url is defined