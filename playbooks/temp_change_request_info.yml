---
- name: Buckets (Novos sem owner, SLA perto, Violadas + 24h sem update) a partir de variáveis locais
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # Limiares
    window_minutes_new: 15     # "novas" = abertas nos últimos X minutos e sem owner
    near_breach_minutes: 60    # SLA expira em <= X minutos
    stale_hours: 24            # Sem atualização há >= X horas (para violadas)

  # Apenas o vars.yml é obrigatório.
  # Se quiser, adicione em vars.yml uma chave opcional "slas: [...]"
  vars_files:
    - "vars.yml"

  pre_tasks:
    - name: Validar 'records' (changes)
      assert:
        that:
          - records is defined
          - records | type_debug == 'list'
        fail_msg: "Esperava 'records' como lista em vars.yml."

    - name: Garantir que 'slas' exista (pode ser lista vazia)
      set_fact:
        slas: "{{ slas | default([]) }}"

  tasks:
    # ========= Base temporal =========
    - name: Agora (UTC epoch)
      set_fact:
        now_epoch: "{{ lookup('pipe','date -u +%s') | int }}"

    # ========= Normalizações =========
    - name: Normalizar CHGs
      set_fact:
        chg_all: "{{ records }}"

    - name: Mapa sys_id -> number (sem json_query)
      set_fact:
        map_sysid_to_number: >-
          {{
            dict(
              (chg_all | map(attribute='sys_id')   | list)
              | zip(chg_all | map(attribute='number') | list)
            )
          }}

    - name: Mapa number -> sys_id (sem json_query)
      set_fact:
        map_number_to_sysid: >-
          {{
            dict(
              (chg_all | map(attribute='number') | list)
              | zip(chg_all | map(attribute='sys_id')   | list)
            )
          }}

    # ========= Buckets =========
    - name: Inicializar buckets
      set_fact:
        novos_sem_owner: []
        near_breach: []
        violadas_stale: []

    # -------- 1) Novos e sem tratamento --------
    - name: Classificar "Novos e sem tratamento"
      set_fact:
        novos_sem_owner: "{{ novos_sem_owner + [ novo_reg ] }}"
      vars:
        opened_epoch: >-
          {{ (lookup('pipe', 'date -u -d ' ~ (item.opened_at | quote) ~ ' +%s') | int)
              if (item.opened_at is defined and (item.opened_at | string | length) > 0) else 0 }}
        delta_open_sec: "{{ (now_epoch | int) - (opened_epoch | int) }}"
        minutos_aberto: "{{ (delta_open_sec // 60) | int }}"
        sem_owner: >-
          {{ (item.assigned_to is not defined) or ((item.assigned_to | string | trim) == '') }}
        novo_reg: >-
          {{
            {
              'number': item.number,
              'sys_id': item.sys_id,
              'short_description': item.short_description | default(''),
              'opened_at': item.opened_at | default(''),
              'minutes_open': minutos_aberto | int
            }
          }}
      loop: "{{ chg_all }}"
      loop_control:
        label: "{{ item.number | default('sem-number') }}"
      when:
        - item.opened_at is defined
        - (item.opened_at | string | length) > 0
        - sem_owner
        - delta_open_sec | int <= (window_minutes_new | int) * 60

    # -------- 2) SLA próximo de violar (opcional; só roda se houver 'slas') --------
    - name: Aviso — Sem dados de SLA, pulando bucket "near_breach"
      debug:
        msg: "Não encontrei 'slas' (ou lista vazia). Pulei 'SLA próximo de violar'."
      when: slas | length == 0

    - name: Classificar "SLA próximo de violar"
      set_fact:
        near_breach: "{{ (near_breach + [ nb_reg ]) | unique }}"
      vars:
        # Resolve o número da CHG pelo sys_id se necessário
        chg_num: >-
          {{
            ( item.task_number | default('') )
              if (item.task_number | default('') | length > 0)
              else (
                map_sysid_to_number[item.task]
                  if (item.task is defined and item.task in map_sysid_to_number)
                  else ''
              )
          }}
        planned_end_epoch: >-
          {{
            (lookup('pipe', 'date -u -d ' ~ ( (item.planned_end_time | default('') ) | quote ) ~ ' +%s') | int)
              if (item.planned_end_time is defined and (item.planned_end_time | string | length) > 0)
              else 0
          }}
        has_breached_bool: >-
          {{
            (item.has_breached)
              if (item.has_breached is boolean)
              else ((item.has_breached | default('false') | string | lower) == 'true')
          }}
        time_left_sec: "{{ (planned_end_epoch | int) - (now_epoch | int) }}"
        nb_reg: >-
          {{
            {
              'number': chg_num,
              'minutes_left': (time_left_sec // 60) | int,
              'planned_end_time': item.planned_end_time | default('')
            }
          }}
      loop: "{{ slas }}"
      loop_control:
        label: "{{ item.task_number | default(item.task | default('sem-task')) }}"
      when:
        - slas | length > 0
        - has_breached_bool == false
        - planned_end_epoch | int > 0
        - time_left_sec | int >= 0
        - time_left_sec | int <= (near_breach_minutes | int) * 60
        - chg_num | length > 0

    # -------- 3) Violadas e ≥24h sem atualização (opcional; só roda se houver 'slas') --------
    - name: Aviso — Sem dados de SLA, pulando bucket "violadas_stale"
      debug:
        msg: "Não encontrei 'slas' (ou lista vazia). Pulei 'Violadas + sem update >= {{ stale_hours }}h'."
      when: slas | length == 0

    - name: Classificar "Violadas e sem atualização há >= {{ stale_hours }}h"
      set_fact:
        violadas_stale: "{{ (violadas_stale + [ vs_reg ]) | unique }}"
      vars:
        has_breached_bool: >-
          {{
            (item.has_breached)
              if (item.has_breached is boolean)
              else ((item.has_breached | default('false') | string | lower) == 'true')
          }}
        chg_num: >-
          {{
            ( item.task_number | default('') )
              if (item.task_number | default('') | length > 0)
              else (
                map_sysid_to_number[item.task]
                  if (item.task is defined and item.task in map_sysid_to_number)
                  else ''
              )
          }}
        chg_sysid: >-
          {{
            (item.task)
              if (item.task is defined and (item.task | string | length) > 0)
              else ( map_number_to_sysid[chg_num] if (chg_num in map_number_to_sysid) else '' )
          }}
        chg_obj: "{{ (chg_all | selectattr('sys_id','equalto', chg_sysid) | list | first) | default({}) }}"
        updated_epoch: >-
          {{
            (lookup('pipe','date -u -d ' ~ ( (chg_obj.sys_updated_on | default('') ) | quote ) ~ ' +%s') | int)
              if (chg_obj.sys_updated_on is defined and (chg_obj.sys_updated_on | string | length) > 0)
              else 0
          }}
        opened_epoch: >-
          {{
            (lookup('pipe','date -u -d ' ~ ( (chg_obj.opened_at | default('') ) | quote ) ~ ' +%s') | int)
              if (chg_obj.opened_at is defined and (chg_obj.opened_at | string | length) > 0)
              else 0
          }}
        hours_since_update: "{{ ((now_epoch | int) - (updated_epoch | int)) // 3600 }}"
        hours_open: "{{ ((now_epoch | int) - (opened_epoch | int)) // 3600 }}"
        vs_reg: >-
          {{
            {
              'number': chg_num,
              'last_update': chg_obj.sys_updated_on | default(''),
              'hours_since_update': hours_since_update | int,
              'opened_at': chg_obj.opened_at | default(''),
              'hours_open': hours_open | int
            }
          }}
      loop: "{{ slas }}"
      loop_control:
        label: "{{ item.task_number | default(item.task | default('sem-task')) }}"
      when:
        - slas | length > 0
        - has_breached_bool == true
        - chg_num | length > 0
        - updated_epoch | int > 0
        - ((now_epoch | int) - (updated_epoch | int)) >= (stale_hours | int) * 3600

    # ========= Saídas =========
    - name: Contagens por bucket
      debug:
        msg:
          - "Novos e sem owner (<= {{ window_minutes_new }} min): {{ novos_sem_owner | length }}"
          - "SLA próximo (<= {{ near_breach_minutes }} min): {{ near_breach | length }}"
          - "Violadas + sem update >= {{ stale_hours }}h: {{ violadas_stale | length }}"

    - name: Listas de números por bucket
      debug:
        msg:
          novos_sem_owner: "{{ novos_sem_owner | map(attribute='number') | list }}"
          near_breach:     "{{ near_breach     | map(attribute='number') | list }}"
          violadas_stale:  "{{ violadas_stale  | map(attribute='number') | list }}"

    - name: Detalhes | Novos e sem owner
      debug:
        var: novos_sem_owner

    - name: Detalhes | SLA próximo de violar
      debug:
        var: near_breach
      when: slas | length > 0

    - name: Detalhes | Violadas e >= {{ stale_hours }}h sem update
      debug:
        var: violadas_stale
      when: slas | length > 0

    - name: Mensagem pronta (resumo texto p/ Google Chat)
      set_fact:
        chat_text: |-
          *Novos e sem owner (<= {{ window_minutes_new }} min):* {{ novos_sem_owner | map(attribute='number') | list }}
          *SLA próximo (<= {{ near_breach_minutes }} min):* {{ near_breach | map(attribute='number') | list }}
          *Violadas + sem update >= {{ stale_hours }}h:* {{ violadas_stale | map(attribute='number') | list }}

    - name: Pré-visualizar mensagem
      debug:
        var: chat_text
